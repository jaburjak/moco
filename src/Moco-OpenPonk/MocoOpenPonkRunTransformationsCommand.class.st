"
UI command that transforms an OntoUML model to SQL and displays the results.
"
Class {
	#name : #MocoOpenPonkRunTransformationsCommand,
	#superclass : #Object,
	#instVars : [
		'workbench'
	],
	#category : #'Moco-OpenPonk-Ui'
}

{ #category : #'private - processing' }
MocoOpenPonkRunTransformationsCommand >> addModel: aMocoWrappedModel withLabel: aString toTranscript: aMocoTranscriptPresenter [
	| str |
	str := String new writeStream.
	
	MocoModelPrinter print: aMocoWrappedModel to: str.
	
	aMocoTranscriptPresenter addSection: (str contents) withLabel: aString
]

{ #category : #execution }
MocoOpenPonkRunTransformationsCommand >> execute [
	| ontoModel umlModel dbModel sqlModel transcript models |
	
	ontoModel := self readOntoUmlModel.
	umlModel := MocoOntoUmlToUmlFacade transform: ontoModel.
	dbModel := MocoUmlToRdbFacade transform: umlModel.
	sqlModel := MocoRdbOracleToSqlFacade transform: (dbModel last).
	
	transcript := (MocoSpApplication instance) new: MocoTranscriptPresenter.
	
	self addModel: ontoModel withLabel: 'OntoUML' toTranscript: transcript.
	self addModel: umlModel withLabel: 'UML' toTranscript: transcript.
	self addModel: (dbModel first) withLabel: 'UML for RDB' toTranscript: transcript.
	self addModel: (dbModel last) withLabel: 'Database' toTranscript: transcript.
	self addModel: sqlModel withLabel: 'Oracle SQL' toTranscript: transcript.
	
	models := OrderedCollection new.
	models add: (self packageModel: umlModel as: 'UML Model' usingRulesWithTag: 'Rule-Uml' andClassPrefix: 'MocoOpenPonkUml');
		add: (self packageModel: (dbModel first) as: 'UML Model for RDB' usingRulesWithTag: 'Rule-Uml' andClassPrefix: 'MocoOpenPonkUml');
		add: (self packageModel: (dbModel last) as: 'RDB Model' usingRulesWithTag: 'Rule-Rdb' andClassPrefix: 'MocoOpenPonkRdb').
	
	transcript open maximize.
	transcript tabs layout children last click.
	transcript body takeKeyboardFocus.
	
	self openOpenPonk: models
]

{ #category : #'private - processing' }
MocoOpenPonkRunTransformationsCommand >> openOpenPonk: aCollection [
	| project wb |
	project := OPProject new.
	project name: 'Transformation Result'.
	
	aCollection do: [ :each | project addModel: each ].
	
	wb := OPWorkbench openProject: project.
	wb showAllElementsInAllDiagrams.
	
	wb projectController controllers do: [ :each |
		| facade |
		facade := OPShowHideFacade on: each.
		
		(each model packagedElements select: [ :e | e isKindOf: OPUMLAssociation ]) do: [ :a | "hides attributes generated by navigable associations"
			| attr |
			attr := a memberEnds at: 2.
			facade hide: (OrderedCollection with: attr).
			attr name: ''
		].
	
		((each model name) = 'RDB Model') ifTrue: [
			wb focusEditorOf: (each diagramController diagramElement)
		]
	].

	wb withWindowDo: [ :each | each centered ]
]

{ #category : #'private - processing' }
MocoOpenPonkRunTransformationsCommand >> packageModel: aMocoWrappedModel as: aString usingRulesWithTag: aString2 andClassPrefix: aString3 [
	| engine rulesRepo model |
	engine := MocoTransformationEngine new.
	
	engine inModel: (MocoWrappedModelFactory fromModel: aMocoWrappedModel);
		outModel: (MocoWrappedModel new).
		
	rulesRepo := MocoTransformationRuleDynamicRepository new.
	rulesRepo rulesPackage: 'Moco-OpenPonk';
		rulesTag: aString2;
		classPrefix: aString3.
	
	rulesRepo injectTo: engine.
	
	engine transform.
	
	model := OPUMLPackage new name: aString.
	model packagedElements: (engine outModel elements collect: [ :each | each innerElement ]).
	
	^ model
]

{ #category : #'private - processing' }
MocoOpenPonkRunTransformationsCommand >> readOntoUmlModel [
	^ MocoOpenPonkOntoUmlModelFactory createMoco: (workbench focusedEditor diagramController model)
]

{ #category : #accessing }
MocoOpenPonkRunTransformationsCommand >> workbench [
	^ workbench
]

{ #category : #accessing }
MocoOpenPonkRunTransformationsCommand >> workbench: anOPWorkbench [
	workbench := anOPWorkbench
]
